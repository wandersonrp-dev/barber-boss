@page "/barbearia/perfil"

@layout MainLayout

@inject IBarberShopApi BarberShopApi
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<PageTitle>Perfil da Barbearia - Barber Boss</PageTitle>

<div class="flex flex-col">
    <div class="border-b-2 border-neutral-900/20 mb-4 flex w-full justify-center py-4">
        <div class="border-2 border-[#3b82f6] flex h-24 w-24 items-center justify-center rounded-full">
            @if (User is not null)
            {
                <span class="text-4xl">@User!.Claims.FirstOrDefault(claim => claim.Type == "unique_name")!.Value.Substring(0, 1)</span>
            }
        </div>
    </div>
    <div class="w-full text-center">
        <h2 class="text-2xl">Perfil da Barbearia</h2>
    </div>

    <div class="mt-4 w-full">
        @if(_barberShop is not null)
        {
            <form class="flex flex-col gap-8" @onsubmit="Submit">
                <div class="grid-cols-2 grid gap-4">
                    <AntiforgeryToken />
                    <div class="flex flex-col gap-2">
                        <label>Nome:</label>
                        <input type="text" @bind-value="_barberShop.Name" class="text-[#1a1a1a] h-12 rounded border border-neutral-900 px-1 text-lg" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>E-mail:</label>
                        <input type="email" @bind-value="_barberShop.Email" class="text-[#1a1a1a] h-12 rounded border border-neutral-900 px-1 text-lg" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>Telefone:</label>
                        <input id="phoneMask" type="text" @ref="_inputPhone" @bind-value="_barberShop.Phone" class="text-[#1a1a1a] h-12 rounded border border-neutral-900 px-1 text-lg" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>Contato de Telefone:</label>
                        <input type="text" @bind-value="_barberShop.PhoneContact" class="text-[#1a1a1a] h-12 rounded border border-neutral-900 px-1 text-lg" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>Senha:</label>
                        <input type="password" @bind-value="_barberShop.Password" class="text-[#1a1a1a] h-12 rounded border border-neutral-900 px-1 text-lg" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>Confirmação de Senha:</label>
                        <input type="password" @bind-value="_confirmPassword" class="text-[#1a1a1a] h-12 rounded border border-neutral-900 px-1 text-lg" />
                    </div>
                </div>
                <div class="flex w-full justify-end">
                    <button class="min-w-[200px] bg-[#3b82f6] flex w-1/4 items-center justify-center rounded p-3 hover:bg-[#2563eb]" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <Spinner />
                            <span class="text-neutral-500">Salvar</span>
                        }
                        else
                        {
                            <span class="text-neutral-50">Salvar</span>
                        }
                    </button>
                </div>
            </form>
        }
    </div>

    @if(_success)
    {
        <SuccessToast Message="Perfil atualizado com sucesso"/>        
    }
</div>

@code {
    private ResponseBarberShopJson _barberShop = new();
    private string _confirmPassword = string.Empty;
    private bool _isLoading;
    private bool _success;

    private ElementReference _inputPhone = new();
    private string _inputPhoneOut = string.Empty;

    [CascadingParameter]
    public ClaimsPrincipal? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBarberShopProfile();                
    }

    private async Task GetBarberShopProfile()
    {
        try
        {
            var result = await BarberShopApi.GetProfile();

            if (result.IsSuccessStatusCode)
            {
                _barberShop = result.Content;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error => {ex.Message}");
        }
    }

    private async Task Submit()
    {
        _isLoading = true;

        try
        {
            await GetInputPhoneOut();

            var result = await BarberShopApi.UpdateProfile(new RequestBarberShopJson
            {
                Name = _barberShop.Name,
                Email = _barberShop.Email,
                Phone = _inputPhoneOut,
                PhoneContact = _barberShop.PhoneContact,
                Password = !string.IsNullOrWhiteSpace(_barberShop.Password) ? _barberShop.Password : string.Empty, 
            });            

            if (result.IsSuccessStatusCode)
            {
                _success = true;                
                _isLoading = false;
                StateHasChanged();
                await Task.Delay(TimeSpan.FromSeconds(2));                         
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            _isLoading = false;
            _success = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await Task.Delay(TimeSpan.FromMilliseconds(500));
            await JS.InvokeVoidAsync("initMask", _inputPhone, new { mask = "(00) 0 0000-0000" });                                    
        }
    }

    private async Task GetInputPhoneOut()
    {
        _inputPhoneOut = await JS.InvokeAsync<string>("getUnmaskedPhoneValue", "phoneMask");        
    }
}
