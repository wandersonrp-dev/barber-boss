@page "/barbeiro/perfil"

@layout MainLayout

@inject IBarberApi BarberApi
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS

<PageTitle>Perfil do(a) Barbeiro(a) - Barber Boss</PageTitle>

<div class="flex flex-col">
    <div class="border-b-2 border-neutral-900/20 mb-4 flex w-full justify-center py-4">
        <div class="border-2 flex h-24 w-24 items-center justify-center rounded-full border-[#3b82f6]">
            @if (User is not null)
            {
                <span class="text-4xl">@User!.Claims.FirstOrDefault(claim => claim.Type == "unique_name")!.Value.Substring(0, 1)</span>
            }
        </div>
    </div>
    <div class="w-full text-center">
        <h2 class="text-2xl">Perfil da Barbearia</h2>
    </div>

    <div class="mt-4 w-full">
        @if (_barber is not null)
        {
            <form class="flex flex-col gap-8" @onsubmit="Submit">
                <div class="grid-cols-2 grid gap-4">
                    <AntiforgeryToken />
                    <div class="flex flex-col gap-2">
                        <label>Nome:</label>
                        <input type="text" @bind-value="_barber.Name" class="h-12 rounded border border-neutral-900 px-1 text-lg text-[#1a1a1a]" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>E-mail:</label>
                        <input type="email" @bind-value="_barber.Email" class="h-12 rounded border border-neutral-900 px-1 text-lg text-[#1a1a1a]" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>Telefone:</label>
                        <input id="phoneMask" type="text" @ref="_inputPhone" @bind-value="_barber.Phone" class="h-12 rounded border border-neutral-900 px-1 text-lg text-[#1a1a1a]" />
                    </div>

                    @* <div class="flex flex-col gap-2">
                        <label>Contato de Telefone:</label>
                        <input type="text" @bind-value="_barber.PhoneContact" class="h-12 rounded border border-neutral-900 px-1 text-lg text-[#1a1a1a]" />
                    </div> *@

                    <div class="flex flex-col gap-2">
                        <label>Senha:</label>
                        <input type="password" @bind-value="_barber.Password" class="h-12 rounded border border-neutral-900 px-1 text-lg text-[#1a1a1a]" />
                    </div>

                    <div class="flex flex-col gap-2">
                        <label>Confirmação de Senha:</label>
                        <input type="password" @bind-value="_confirmPassword" class="h-12 rounded border border-neutral-900 px-1 text-lg text-[#1a1a1a]" />
                    </div>
                </div>
                <div class="flex w-full justify-end">
                    <button class="flex w-1/4 min-w-[200px] items-center justify-center rounded bg-[#3b82f6] p-3 hover:bg-[#2563eb]" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <Spinner />
                            <span class="text-neutral-500">Salvar</span>
                        }
                        else
                        {
                            <span class="text-neutral-50">Salvar</span>
                        }
                    </button>
                </div>
            </form>
        }
    </div>

    @if (_success)
    {
        <SuccessToast Message="Perfil atualizado com sucesso" />
    }
</div>

@code {
    private ResponseBarberJson _barber = new();

    private bool _success;
    private bool _isLoading;
    private string _confirmPassword = string.Empty;

    [CascadingParameter]
    public ClaimsPrincipal? User { get; set; }

    private ElementReference _inputPhone = new();
    private string _inputPhoneOut = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetProfile();
    }

    private async Task Submit()
    {
        
    }

    // private async Task Submit()
    // {
    //     _isLoading = true;

    //     try
    //     {
    //         await GetInputPhoneOut();

    //         var result = await BarberApi.UpdateProfile(new RequestBarberJson
    //             {
    //                 Name = _barber.Name,
    //                 Email = _barber.Email,
    //                 Phone = _inputPhoneOut,                    
    //                 Password = !string.IsNullOrWhiteSpace(_barber.Password) ? _barber.Password : string.Empty,
    //             });

    //         if (result.IsSuccessStatusCode)
    //         {
    //             _success = true;
    //             _isLoading = false;
    //             StateHasChanged();
    //             await Task.Delay(TimeSpan.FromSeconds(2));
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex.Message);
    //     }
    //     finally
    //     {
    //         _isLoading = false;
    //         _success = false;
    //         StateHasChanged();
    //     }
    // }

    private async Task GetProfile()
    {
        try
        {
            var result = await BarberApi.GetProfile();

            if (result.IsSuccessStatusCode)
            {
                _barber = result.Content;
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(TimeSpan.FromMilliseconds(500));
            await JS.InvokeVoidAsync("initMask", _inputPhone, new { mask = "(00) 0 0000-0000" });
        }
    }

    private async Task GetInputPhoneOut()
    {
        _inputPhoneOut = await JS.InvokeAsync<string>("getUnmaskedPhoneValue", "phoneMask");
    }
}
