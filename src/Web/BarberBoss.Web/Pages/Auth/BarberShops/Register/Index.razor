@page "/barbearia/cadastro"

@using BarberBoss.Communication.Requests.BarberShop
@using BarberBoss.Communication.Responses
@using BarberBoss.Communication.Validators.BarberShop
@using BarberBoss.Exception
@using BarberBoss.Web.Apis.BarberShops
@using System.Net
@using System.Text.Json

@layout EmptyLayout

@inject IBarberShopApi BarberShopApi

<PageTitle>Cadastre-se - Barber Boss</PageTitle>

<main class="bg-[#1a1a1a] border-2 flex h-screen w-screen items-center justify-center">
    <form class="min-w-[400px] min-h-[400px] flex flex-col gap-5 rounded px-5 py-8 shadow-xl shadow-neutral-800" @onsubmit="Submit">
        <AntiforgeryToken />
        <h1 class="text-3xl">Cadastre sua barbearia</h1>

        <div class="@(_responseErrorMessages.Count == 0 ? "hidden" : string.Empty) h-10 w-full">
            @if(_responseErrorMessages.Count > 0)
            {
                @foreach (var errorMessage in _responseErrorMessages)
                {
                    <span class="text-red-500">@errorMessage</span>
                }
            }
        </div>

        <div class="flex w-full flex-col gap-4">
            <input class="text-[#1a1a1a] h-12 w-full rounded px-1 outline-none" type="text" placeholder="Digite o nome da barbearia" @bind-value="_model.Name"/>
            <span class="text-red-500 @(ErrorMessagesDictionaryHasKey("Name") ? string.Empty : "hidden")">@(ErrorMessagesDictionaryHasKey("Name") ? _validationErrorMessages["Name"] : string.Empty)</span>

            <input class="text-[#1a1a1a] h-12 w-full rounded px-1 outline-none" type="email" placeholder="Digite o e-mail" @bind-value="_model.Email"/>
            <span class="text-red-500 @(ErrorMessagesDictionaryHasKey("Email") ? string.Empty : "hidden")">@(ErrorMessagesDictionaryHasKey("Email") ? _validationErrorMessages["Email"] : string.Empty)</span>

            <input class="text-[#1a1a1a] h-12 w-full rounded px-1 outline-none" type="text" placeholder="Digite o número de telefone" @bind-value="_model.Phone"/>
            <span class="text-red-500 @(ErrorMessagesDictionaryHasKey("Phone") ? string.Empty : "hidden")">@(ErrorMessagesDictionaryHasKey("Phone") ? _validationErrorMessages["Phone"] : string.Empty)</span>

            <input class="text-[#1a1a1a] h-12 w-full rounded px-1 outline-none" type="text" placeholder="Digite o nome do contato do telefone" @bind-value="_model.PhoneContact"/>
            <span class="text-red-500 @(ErrorMessagesDictionaryHasKey("PhoneContact") ? string.Empty : "hidden")">@(ErrorMessagesDictionaryHasKey("PhoneContact") ? _validationErrorMessages["PhoneContact"] : string.Empty)</span>

            <input class="text-[#1a1a1a] h-12 w-full rounded px-1 outline-none" type="password" placeholder="Digite a senha" @bind-value="_model.Password"/>
            <span class="text-red-500 @(ErrorMessagesDictionaryHasKey("Password") ? string.Empty : "hidden")">@(ErrorMessagesDictionaryHasKey("Password") ? _validationErrorMessages["Password"] : string.Empty)</span>

            <input class="text-[#1a1a1a] h-12 w-full rounded px-1 outline-none" type="password" placeholder="Digite a confirmação de senha" @bind-value="_model.ConfirmPassword" />
            <span class="text-red-500 @(ErrorMessagesDictionaryHasKey("ConfirmPassword") ? string.Empty : "hidden")">@(ErrorMessagesDictionaryHasKey("ConfirmPassword") ? _validationErrorMessages["ConfirmPassword"] : string.Empty)</span>
        </div>
        <div class="w-full">
            <button class="bg-[#3b82f6] flex w-full items-center justify-center rounded p-3 hover:bg-[#2563eb]" disabled="@_isLoading">
                @if(_isLoading)
                {
                    <svg class="mr-3 h-5 w-5 animate-spin" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                        </circle> 
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path> 
                    </svg>
                    <span>Cadastre-se</span>
                }
                else
                {
                    <span>Cadastre-se</span>
                }
            </button>
        </div>
        <div class="flex w-full flex-col">
            <NavLink href="/" class="w-full text-center">Já possui uma conta? <span class="text-[#3b82f6]">Entrar</span></NavLink>
        </div>
    </form>
</main>

@code {
    private RequestRegisterBarberShopJson _model = new();
    private Dictionary<string, string> _validationErrorMessages = new();
    private List<string> _responseErrorMessages = new();
    private RegisterBarberShopValidator _validator = new();
    private bool _isLoading;

    private async Task Submit()
    {        
        _isLoading = true;

        var validatorResult = _validator.Validate(_model);

        if (!validatorResult.IsValid)
        {
            foreach (var error in validatorResult.Errors)
            {
                Console.WriteLine($"Property Name: {error.PropertyName}");
                if (!_validationErrorMessages.ContainsKey(error.PropertyName))
                {                    
                    _validationErrorMessages.Add(error.PropertyName, error.ErrorMessage);
                }
            }

            _isLoading = false;

            await Task.Delay(TimeSpan.FromSeconds(2));

            _validationErrorMessages.Clear();
            return;
        }

        try
        {
            var result = await BarberShopApi.SignUp(_model);

            if (!result.IsSuccessStatusCode)
            {
                switch(result.StatusCode)
                {
                    case HttpStatusCode.BadRequest:
                        var errorContent = result.Error.Content!;
                        var validationErrors = JsonSerializer.Deserialize<ResponseErrorJson>(errorContent);

                        if (validationErrors is not null)
                        {
                            foreach (var error in validationErrors.ErrorMessages)
                            {
                                _responseErrorMessages.Add(error);
                            }
                        }

                        break;
                    case HttpStatusCode.Conflict:
                        _responseErrorMessages.Add(ResourceErrorMessages.BARBER_SHOP_ALREADY_EXISTS);
                        StateHasChanged();
                        break;
                    default:
                        return;
                }
            }            
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            _isLoading = false;
            Clear();
        }
    }

    private bool ErrorMessagesDictionaryHasKey(string key)
    {
        bool hasKey = default;

        if (_validationErrorMessages.ContainsKey(key)) hasKey = true;

        return hasKey;
    }

    private void Clear()
    {
        _model = default!;
    }
}