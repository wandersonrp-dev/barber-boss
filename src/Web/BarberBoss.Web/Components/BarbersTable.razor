@using BarberBoss.Communication.Responses.Barber

@inject IJSRuntime JS
@inject IBarberShopApi BarberShopApi

<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <div class="flex-column flex flex-wrap items-center justify-between space-y-4 bg-white p-4 dark:bg-gray-900 md:flex-row md:space-y-0">
        <div>
            <button id="dropdownActionButton" data-dropdown-toggle="dropdownAction" class="inline-flex items-center rounded-lg border border-gray-300 bg-white px-3 py-1.5 text-sm font-medium text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-100 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700" type="button">
                <span class="sr-only">Ações</span>
                Ações
                <svg class="ms-2.5 h-2.5 w-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4" />
                </svg>
            </button>
            <div id="dropdownAction" class="z-10 hidden w-56 divide-y divide-gray-100 rounded-lg bg-white shadow dark:bg-gray-700 dark:divide-gray-600">
                <ul class="py-1 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownActionButton">
                    <li>
                        <button href="#" class="flex w-full items-center justify-between px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white" data-modal-target="crud-modal" data-modal-toggle="crud-modal">
                            <span>Criar barbeiro</span>
                            <svg class="h-6 w-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                                <path fill-rule="evenodd" d="M9 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-2 9a4 4 0 0 0-4 4v1a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-1a4 4 0 0 0-4-4H7Zm8-1a1 1 0 0 1 1-1h1v-1a1 1 0 1 1 2 0v1h1a1 1 0 1 1 0 2h-1v1a1 1 0 1 1-2 0v-1h-1a1 1 0 0 1-1-1Z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </li>
                    <li>
                        <button href="#" class="flex w-full items-center justify-between px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                            <span>Suspender barbeiro</span>
                            <svg class="h-6 w-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14" />
                            </svg>
                        </button>
                    </li>
                </ul>
                <div class="py-1">
                    <button href="#" class="flex w-full items-center justify-between px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                        <span class="text-sm">Excluir barbeiro</span>
                        <svg class="h-6 w-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor">
                            <path fill-rule="evenodd" d="M8.586 2.586A2 2 0 0 1 10 2h4a2 2 0 0 1 2 2v2h3a1 1 0 1 1 0 2v12a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V8a1 1 0 0 1 0-2h3V4a2 2 0 0 1 .586-1.414ZM10 6h4V4h-4v2Zm1 4a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Zm4 0a1 1 0 1 0-2 0v8a1 1 0 1 0 2 0v-8Z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
        <label for="table-search" class="sr-only">Pesquisar</label>
        <div class="relative">
            <div class="pointer-events-none absolute inset-y-0 start-0 flex items-center ps-3 rtl:inset-r-0">
                <svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                </svg>
            </div>
            <input type="text" id="table-search-users" class="block w-80 rounded-lg border border-gray-300 bg-gray-50 p-2 ps-10 text-sm text-gray-900 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Pesquisar por barbeiros">
        </div>
    </div>
    <table class="w-full text-left text-sm text-gray-500 rtl:text-right dark:text-gray-400">
        <thead class="bg-gray-50 text-xs uppercase text-gray-700 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="p-4">
                    <div class="flex items-center">
                        <input id="checkbox-all-search" type="checkbox" class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-blue-500 focus:ring-2 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:focus:ring-offset-gray-800">
                        <label for="checkbox-all-search" class="sr-only">checkbox</label>
                    </div>
                </th>
                <th scope="col" class="px-6 py-3">
                    Nome
                </th>
                <th scope="col" class="px-6 py-3">
                    Status
                </th>
                <th scope="col" class="px-6 py-3">
                    Ações
                </th>
            </tr>
        </thead>
        <tbody>
            <tr class="border-b bg-white hover:bg-gray-50 dark:bg-gray-800 dark:border-gray-700 dark:hover:bg-gray-600">
                <td class="w-4 p-4">
                    <div class="flex items-center">
                        <input id="checkbox-table-search-1" type="checkbox" class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-blue-500 focus:ring-2 dark:ring-offset-gray-800 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:focus:ring-offset-gray-800">
                        <label for="checkbox-table-search-1" class="sr-only">checkbox</label>
                    </div>
                </td>
                <th scope="row" class="flex items-center whitespace-nowrap px-6 py-4 text-gray-900 dark:text-white">
                    @* <img class="h-10 w-10 rounded-full" src="/docs/images/people/profile-picture-1.jpg" alt="Jese image"> *@
                    <div class="ps-3">
                        <div class="text-base font-semibold">Neil Sims</div>
                        <div class="font-normal text-gray-500">neil.sims@flowbite.com</div>
                    </div>
                </th>
                <td class="px-6 py-4">
                    <div class="flex items-center">
                        <div class="me-2 h-2.5 w-2.5 rounded-full bg-green-500"></div> Online
                    </div>
                </td>
                <td class="px-6 py-4">
                    <a href="#" class="font-medium text-blue-600 hover:underline dark:text-blue-500">Edit user</a>
                </td>
            </tr>
        </tbody>
    </table>
</div>

<div id="crud-modal" tabindex="-1" aria-hidden="true" class="h-[calc(100%-1rem)] fixed left-0 right-0 top-0 z-50 hidden max-h-full w-full items-center justify-center overflow-y-auto overflow-x-hidden md:inset-0">
    <div class="relative max-h-full w-full max-w-md p-4">
        <!-- Modal content -->
        <div class="relative rounded-lg bg-white shadow dark:bg-gray-700">
            <!-- Modal header -->
            <div class="flex items-center justify-between rounded-t border-b p-4 dark:border-gray-600 md:p-5">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                    Criar barbeiro
                </h3>
                <button type="button" class="ms-auto inline-flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="crud-modal">
                    <svg class="h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <!-- Modal body -->
            <form class="p-4 md:p-5" @onsubmit="Submit">
                <AntiforgeryToken />
                <div class="grid-cols-2 mb-4 grid gap-4">
                    <div class="col-span-2">
                        <label for="name" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Nome:</label>
                        <input type="text" name="name" id="name" @bind-value="_model.Name" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Digite o nome" required="">
                    </div>
                    <div class="col-span-2">
                        <label for="email" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">E-mail:</label>
                        <input type="email" name="email" id="email" @bind-value="_model.Email" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Digite o e-mail" required="">
                    </div>
                    <div class="col-span-2 sm:col-span-1">
                        <label for="phone" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Telefone:</label>
                        <input type="text" name="phone" id="phone" @ref="_inputPhone" @bind-value="_model.Phone" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Digite o número de telefone" required="">
                    </div>
                    <div class="col-span-2">
                        <label for="password" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Senha:</label>
                        <input type="password" name="password" id="password" @bind-value="_model.Password" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Digite a senha" required="">
                    </div>
                    <div class="col-span-2">
                        <label for="confirm-password" class="mb-2 block text-sm font-medium text-gray-900 dark:text-white">Confirmação de senha:</label>
                        <input type="password" name="confirm-password" id="confirm-password" @bind-value="_model.ConfirmPassword" class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:ring-primary-600 focus:border-primary-600 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500" placeholder="Digite a confirmação de senha" required="">
                    </div>
                </div>
                <button class="inline-flex items-center rounded-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">                                        
                    @if(_isLoading)
                    {
                        <Spinner />
                        <span>Cadastrar</span>
                    }
                    else
                    {
                        <span>Cadastrar</span>
                    }
                </button>
            </form>
        </div>
    </div>
</div>

@if(_errorMessages.Count > 0)
{
    var top = 14;
    for(var i = 0; i < _errorMessages.Count; i++)
    {               
        <ErrorToast Message="@_errorMessages[i]" Top="@(i == 0 ? top : top+=60 )" />
        Task.Delay(TimeSpan.FromSeconds(1));
    }

    @* Task.Delay(TimeSpan.FromSeconds(1));
    _errorMessages.Clear();
    StateHasChanged(); *@

}
else if(_success)
{
    <SuccessToast Message="Barbeiro criado com sucesso!"/>
}

@code {
    private RequestCreateBarberJson _model = new(); 
    private bool _isLoading;
    private CreateBarberValidator _validator = new();
    private bool _success;
    private List<string> _errorMessages = new();

    private ElementReference _inputPhone = new();
    private string _inputPhoneOut = string.Empty;

    private async Task Submit()
    {
        _isLoading = true;

        await GetInputPhoneOut();

        // _model.Phone = _inputPhoneOut;        

        var validatorResult = _validator.Validate(_model);

        if (!validatorResult.IsValid)
        {
            foreach(var error in validatorResult.Errors)
            {
                _errorMessages.Add(error.ErrorMessage);               
            }

            _isLoading = false;
            return;
        }

        try
        {            

            var result = await BarberShopApi.CreateBarber(_model);

            if (!result.IsSuccessStatusCode)
            {                
                switch (result.StatusCode)
                {
                    case HttpStatusCode.Conflict:
                        _errorMessages.Add(ResourceErrorMessages.BARBER_ALREADY_EXISTS);
                        break;

                    case HttpStatusCode.BadRequest:
                        var errorContent = result.Error.Content!;
                        var validationErrors = JsonSerializer.Deserialize<ResponseErrorJson>(errorContent);

                        if (validationErrors is not null)
                        {
                            foreach (var error in validationErrors.ErrorMessages)
                            {
                                _errorMessages.Add(error);
                            }
                        }

                        break;
                    default:
                        return;
                }
            }
            else
            {
                _success = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            _isLoading = false;
            _success = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(TimeSpan.FromMilliseconds(500));
            await JS.InvokeVoidAsync("initMask", _inputPhone, new { mask = "(00) 0 0000-0000" });
        }
    }

    private async Task GetInputPhoneOut()
    {
        _inputPhoneOut = await JS.InvokeAsync<string>("getUnmaskedPhoneValue", "phone");
    }
}